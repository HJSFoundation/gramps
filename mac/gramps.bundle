<?xml version="1.0" encoding="utf-8"?>
<app-bundle>

  <meta>
    <prefix name="default">${env:JHBUILD_PREFIX}</prefix>
    <destination overwrite="yes">${env:HOME}/Desktop</destination>
    <run-install-name-tool/>

    <!-- Indicate the active gtk version to use. This is needed only
	 for gtk+-3.0 projects. -->
    <gtk>gtk+-3.0</gtk>
  </meta>

  <plist>${project}/Info.plist</plist>
  <!-- Build gramps-launcher with:
          gcc -L$PREFIX `python-config --cflags --ldflags` \
              -o $PREFIX/bin/gramps-launcher \
	      path/to/gtk-mac-bundler/examples/python-launcher.c
       with the obvious substitution.
  -->
 <main-binary>
     ${prefix}/bin/gramps-launcher
  </main-binary>

  <!-- Copy in GTK+ modules. Note the use of the
       "${pkg:module:variable}" macro, which evaluates to a pkg-config
       variable in the specified module. Note that any libraries that
       binaries link to are also copied in automatically.
  -->
  <binary>
    ${prefix}/lib/gdk-pixbuf-2.0/${pkg:gdk-pixbuf-2.0:gdk_pixbuf_binary_version}/
  </binary>
<!-- Copy in the quartz input method. -->
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/immodules/im-quartz.so
  </binary>

<!-- And the print backends -->
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/printbackends/*.so
  </binary>

  <binary recurse="True">
    ${prefix}/lib/python3.4/*.so
  </binary>

  <binary>
    ${prefix}/lib/librsvg-2.2.dylib
  </binary>

  <!--binary>
    ${prefix}/lib/libwebkit-1.0.2.dylib
  </binary-->

  <binary>
    ${prefix}/lib/libgtkmacintegration-gtk3.2.dylib
  </binary>

  <binary>
    ${prefix}/lib/libdb-4.dylib
  </binary>

  <binary>
    ${prefix}/lib/libgtkspell3-3.0.dylib
  </binary>

  <binary>
    ${prefix}/lib/enchant
  </binary>

  <binary>
     ${prefix}/lib/libosmgpsmap-1.0.0.dylib
  </binary>

  <binary>
    ${prefix}/lib/libgoocanvas-2.0.9.dylib
  </binary>

  <binary>
    ${prefix}/lib/libhunspell-1.3.0.dylib
  </binary>

  <binary>
    ${prefix}/lib/libtiff.5.dylib
  </binary>

  <binary dest="${bundle}/Contents/MacOS/">
    ${prefix}/bin/dot
  </binary>

  <binary>
    ${prefix}/lib/graphviz/*.dylib
  </binary>

  <binary>
    ${prefix}/lib/libgexiv2.dylib
  </binary>

<!-- Translation filenames, one for each program or library that you
       want to copy in to the bundle. The "dest" attribute is
       optional, as usual. Bundler will find all translations of that
       library/program under the indicated directory and copy them.-->
  <translations name="gtk30">
    ${prefix}/share/locale
  </translations>

  <translations name="gtk30-properties">
    ${prefix}/share/locale
  </translations>

  <translations name="glib20">
    ${prefix}/share/locale
  </translations>

   <translations name="gdk-pixbuf">
    ${prefix}/share/locale
  </translations>

  <translations name="atk10">
    ${prefix}/share/locale
  </translations>

  <translations name="gtkspell3">
    ${prefix}/share/locale
  </translations>

  <translations  name="gramps">
    ${prefix}/share/locale
  </translations>

  <!-- Our launcher script isn't a shell script any more, and our binary really is a binary. -->
  <data dest="${bundle}/Contents/Resources">
    ${project}/gramps_launcher.py
  </data>

  <!-- We have to pull in the python modules, which are mixed python
       and loadable modules.  -->
  <data>
    ${prefix}/share/glib-2.0/schemas
  </data>

  <data recurse="True">
    ${prefix}/lib/python3.4/*.py
  </data>

  <data>
    ${prefix}/lib/python3.4/config-3.4m/
  </data>

  <data>
    ${prefix}/lib/python3.4/site-packages/gramps/gen/utils/resource-path
  </data>

  <data>
    ${prefix}/include/python3.4m/pyconfig.h
  </data>

  <data>
    ${prefix}/lib/girepository-1.0/
  </data>

 <!--data>
    ${prefix}/share/webkit-1.0/
  </data-->

  <data>
    ${prefix}/share/enchant/
  </data>

  <data>
    ${prefix}/share/mime/
  </data>

  <data recurse="True">
    ${prefix}/lib/python3.4/site-packages/gramps/*.glade
  </data>

  <data>
    ${prefix}/share/gramps/
  </data>

  <data recurse="True">
    ${prefix}/share/gramps/images/*.png
  </data>

  <data>
    ${prefix}/share/gramps/images/splash.jpg
  </data>

  <data>
    ${prefix}/share/mime-info/
  </data>
<!-- Note that you must run `dot -c` to create this file -->
  <data>
    ${prefix}/lib/graphviz/config6
  </data>

  <!-- Copy in the themes data. You may want to trim this to save space
       in your bundle. -->
  <data>
    ${prefix}/share/themes
  </data>

  <data>
    ${prefix}/share/icons
  </data>

  <!-- Copy icons. Note that the .icns file is an Apple format which
       contains up to 4 sizes of icon. You can use
       /Developer/Applications/Utilities/Icon Composer.app to import
       artwork and create the file.-->
  <data dest="${bundle}/Contents/Resources">
    ${project}/gramps.icns
  </data>

  <data dest="${bundle}/Contents/Resources/share/gramps/gramps.accel">
    ${project}/gramps.accel
  </data>

  <!-- Default settings file to set the theme. -->
  <data dest="${bundle}/Contents/Resources/etc/gtk-3.0/settings.ini">
    ${project}/settings.ini
  </data>

</app-bundle>
